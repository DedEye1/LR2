import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

#Инициализация бота
bot = Bot(token="7207072684:AAE3DsnPZpYs2elWP6rusFMYp-5QY0SdqW4")
dp = Dispatcher()

#Старт
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    builder = ReplyKeyboardBuilder()
    questions = ["Начало новой жизни", "Тайм-менеджмент", "Новые знакомства",
                 "Отдых", "Пунктуальность", "Стресс", "Сессия", "Общественная жизнь института",
                 "Движение", "Наслаждение студенчеством"]
    for question in questions:
        builder.add(types.KeyboardButton(text=question))

    builder.adjust(3)

    await message.answer("Доброго дня, вечера и чего-либо ещё!\n"
                         "Этот бот призван облегчить жизнь поступившего абитуриента.\n"
                         "Выберите вопрос, на который желаете получить ответ.",
                         reply_markup=builder.as_markup())

#Выход
@dp.message(Command("exit"))
async def send_goodbye(message: types.Message):
    await message.answer("Спасибо, что воспользовались этим ботом!", reply_markup=ReplyKeyboardRemove())

#Начало новой жизни
@dp.message(F.text.lower() == "начало новой жизни")
async def new_life(message: types.Message):
    await message.answer("Для начала поймите, что сейчас пришло время новых знакомств и получения знаний по выбранной специальности.\n"
                        "Этот стиль жизни точно не будет совпадать с тем, что был у вас ранее. \n"
                        "Научитесь самостоятельно работать и решать возникающие проблемы.\n"
                        "Если в школьные годы надо было обязательно учить необходимый материал, то сейчас – никто не будет вас заставлять.\n"
                        "Осознание того, что теперь образование зависит только от вашего желания и стремления – первый шаг на пути к успеху в учебе.")

#Тайм-менеджмент
@dp.message(F.text.lower() == "тайм-менеджмент")
async def time_management (message: types.Message):
    await message.answer("Чтобы успевать подготовиться ко всем семинарам и практическим занятиям, необходимо научиться расставлять приоритеты и составлять личное расписание.\n"
                         "Относитесь к этому пункту с большой ответственностью и тогда вы не столкнетесь с проблемами из разряда «не успел» или «забыл».\n"
                         "Составляйте списки всех дел и дедлайнов, ведите онлайн-расписание, распределяйте задания на день/неделю/месяц, наклеивайте разноцветные стикеры по всей комнате – используйте любой способ, который поможет контролировать вашу деятельность.")

#Новые знакомства
@dp.message(F.text.lower() == "новые знакомства")
async def new_meetings (message: types.Message):
    await message.answer("Старайтесь не быть замкнутыми, даже если вы очень стеснительный человек.\n"
                         "Будьте максимально дружелюбными с однокурсниками – они тоже попали в незнакомую обстановку, как и вы.\n"
                         "Обменивайтесь контактами, вливайтесь в коллектив, в определенный момент вас может спасти именно взаимовыручка людей, с которыми вы вместе учитесь.\n"
                         "Не забывайте про контакты со старшекурсниками, заводите полезные знакомства – они смогут поделиться опытом, знаниями и материалами.\n"
                         "Общайтесь с преподавателями, давайте им понять, что вы заинтересованы в изучении предмета.\n"
                         "Намного лучше знакомиться с ними в начале курса, а не во время экзамена.")

#Отдых
@dp.message(F.text.lower() == "отдых")
async def free_time (message: types.Message):
    await message.answer("Как бы это не звучало странно, очень важно находить время для отдыха.\n"
                         "Когда дедлайны уже на носу и сессия не за горами не позволяйте себе долго сидеть на месте или работать без перерыва.\n"
                         "Путешествуйте, проводите время с друзьями или семьей, ходите в кино или просто ничего не делайте.\n"
                         "Самое главное – научиться посвящать себе достаточного свободного времени.\n"
                         "После хорошего отдыха вам будет легче работать, а значит знания будут лучше вами усвоены.")

#Пунктуальность
@dp.message(F.text.lower() == "пунктуальность")
async def punctuality (message: types.Message):
    await message.answer("Не опаздывайте на пары, старайтесь приходить заранее.\n"
                         "Не все преподаватели хорошо относятся к ситуациям, когда вы забегаете в аудиторию во время лекции.\n"
                         "Некоторые преподаватели вообще не пускают после назначенного времени.\n"
                         "Тут мы возвращаемся к вопросу о том, что это образование в первую очередь необходимо вам и соблюдение простейшей дисциплины позволит вам это сделать, если только вы этого захотите.\n"
                         "Никто не отменяет форс-мажоров, но лучше всего предупредить старосту или преподавателя заранее.\n"
                         "Этот совет также распространяется на соблюдение сроков сдачи необходимых заданий онлайн и офлайн.")

#Стресс
@dp.message(F.text.lower() == "стресс")
async def stress (message: types.Message):
    await message.answer("Стресс во время сессии, тревога перед зачетами и экзаменами, волнение при ожидании оценки – это абсолютно нормальные чувства.\n"
                         "В разумной мере это стимулирует процесс подготовки и даже не разрешает сидеть без дела.\n"
                         "Однако в таких ситуациях важно помнить, что от этого не зависит вся ваша жизнь.\n"
                         "Все люди допускают ошибки, намного важнее научиться находить выход из них.\n"
                         "Поэтому не впадайте в истерическое состояние и не позволяйте себе излишне паниковать, тогда вы сможете справиться с самыми стрессовыми ситуациями и остаться спокойным.")

#Сессия
@dp.message(F.text.lower() == "сессия")
async def session (message: types.Message):
    await message.answer("Знаете, как упросить себе задачу во время подготовки к сессии?\n"
                         "Старайтесь учить все с начала семестра.\n"
                         "Узнайте у преподавателей в каком формате будет проходить итоговая аттестация, какую дополнительную литературу подготовить или какими сайтами пользоваться.\n"
                         "Ведите конспекты лекций, если это предмет, предполагающий устный экзамен или активно отвечайте на семинарах, если важно применить практические знания.\n"
                         "Восстанавливайте пропущенный материал и обязательно спрашивайте у преподавателей все, что вам не понятно.\n"
                         "Намного продуктивнее постепенно изучать материал, а не оставлять все на последнюю ночь перед экзаменом.")

#Общественная жизнь института
@dp.message(F.text.lower() == "общественная жизнь института")
async def life_of_university (message: types.Message):
    await message.answer("Ваша активность за пределами аудитории это не только способ занять свободное время, но еще и шанс провести его с пользой.\n"
                         "Найдите свое место – студенческое самоуправление, научная деятельность, художественно-культурные сообщества, спортивная активность или студенческие СМИ.\n"
                         "Участвуйте в конференциях, международных обменах и заводите сеть знакомств.\n"
                         "Самые разные профили подготовки общественной жизни дадут возможность подумать о будущем и научат работать в коллективе.\n"
                         "А еще благодаря такой активности можно претендовать на повышенные стипендии и гранты.")

#Движение
@dp.message(F.text.lower() == "движение")
async def movements (message: types.Message):
    await message.answer("Когда вся неделя насыщена умственной активностью, самое важное не забывать про занятия спортом.\n"
                         "Учебное заведение дает возможность всем студентам заниматься физической активностью не только на парах по физкультуре, но и в дополнительных секциях.\n"
                         "Это не просто отвлекает вас от учебной рутины, но и укрепляет ваше здоровье, помогает поддерживать вес и стимулирует мозговую активность.\n"
                         "Можно желание заниматься этим, чтобы быть здоровым и всесторонне развитым.")

#Наслаждение студенчеством
@dp.message(F.text.lower() == "наслаждение студенчеством")
async def student_time (message: types.Message):
    await message.answer("Студенчество – особое время.\n"
                         "Это не сравнимо ни с каким другим периодом в жизни.\n"
                         "Поэтому запоминайте каждый момент, учитесь на своих ошибках и обретайте философию житейской мудрости.\n"
                         "Получайте удовольствие от учебы, не воспринимайте это как очередной этап монотонного обучения.\n"
                         "Институт – это не просто лекции и билеты на экзаменах.\n"
                         "Это целая жизнь, которая подарит много ярких воспоминаний.\n"
                         "Ловите момент!")

#Точка входа
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())